@use "sass:map";
@use "sass:color";
@use "variables" as *;

@mixin focus-indicator($inverted: false) {
  $darkblue: color.adjust(map.get($palette, "blue"), $lightness: -10%);
  $inner-color: $darkblue;
  $outer-color: map.get($palette, "white");

  @if $inverted {
    $inner-color: map.get($palette, "white");
    $outer-color: $darkblue;
  }

  // meets 3:1 contrast for WCAG when over a white background
  outline: 3px solid $inner-color;
  box-shadow: 0 0 0 6px $outer-color;
}

@mixin columns($width, $number: 2, $gap: 0) {
  columns: $width $number;
  columns: $width $number;
  columns: $width $number;
  column-gap: $gap;
  column-gap: $gap;
  column-gap: $gap;
  column-rule: 1px solid map.get($palette, "light-grey");
  column-rule: 1px solid map.get($palette, "light-grey");
  column-rule: 1px solid map.get($palette, "light-grey");
}

@mixin translateY($value) {
  transform: translateY($value);
  transform: translateY($value);
  transform: translateY($value);
  transform: translateY($value);
  transform: translateY($value);
}

// background size for images
@mixin background-size($width, $height) {
  background-size: $width $height;
  background-size: $width $height;
  background-size: $width $height;
}

// animations
@mixin animation($name, $interval: 0.8s, $steps: 10, $length: infinite) {
  animation: $name $interval steps($steps) $length;
  animation: $name $interval steps($steps) $length;
  animation: $name $interval steps($steps) $length;
  animation: $name $interval steps($steps) $length;
  animation: $name $interval steps($steps) $length;
}

@mixin keyframes($name, $to, $from: 0) {
  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }
}

// media queries for screen width
@mixin responsive($width) {
  @if $width == medium-screens {
    @media only screen and (max-width: $width-md) {
      @content;
    }
  } @else if $width == tablet-screens {
    @media only screen and (max-width: $width-sm2) {
      @content;
    }
  } @else if $width == small-screens {
    @media only screen and (max-width: $width-sm) {
      @content;
    }
  }
}

// media queries for screen height
@mixin responsive_height($height) {
  @if $height == tall-screens {
    @media only screen and (max-height: $height-lg) {
      @content;
    }
  } @else if $height == medium-screens {
    @media only screen and (max-height: $height-md) {
      @content;
    }
  } @else if $height == short-screens {
    @media only screen and (max-height: $height-sm) {
      @content;
    }
  }
}

@mixin responsive_mobile_landscape() {
  @media only screen and (orientation: landscape) and (height <= $height-sm) {
    @content;
  }
}
