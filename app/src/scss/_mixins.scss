// mixins
// columns
@mixin columns($width, $number: 2, $gap: 0) {
  -webkit-columns: $width $number;
  -moz-columns: $width $number;
  columns: $width $number;
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  column-gap: $gap;
  -webkit-column-rule: 1px solid $lightgray;
  -moz-column-rule: 1px solid $lightgray;
  column-rule: 1px solid $lightgray;
}

@mixin translateY($value) {
  -ms-transform: translateY($value);
  -webkit-transform: translateY($value);
  -moz-transform: translateY($value);
  -o-transform: translateY($value);
  transform: translateY($value);
}

// button
@mixin button {
  display: inline-block;
  position: relative;
  min-width: 170px;
  margin: 0 auto;
  font-size: 2em;
  font-weight: 600;
  text-align: center;
  text-transform: uppercase;
  background-color: $darkorange;
  padding: 10px 20px;
  border: none;
  border-radius: 35px;
  color: #fff;
  cursor: pointer;

  &:hover {
    background-color: $orange;
    color: #fff;
  }

  &:focus {
    outline: none;
    border: none;
    box-shadow: 0 0 3px 2px $blue;
  }
}

// background size for images
@mixin background-size($width, $height) {
  -webkit-background-size: $width $height;
  -moz-background-size: $width $height;
  background-size: $width $height;
}

// animations
@mixin animation($name, $interval: 0.8s, $steps: 10, $length: infinite) {
  -webkit-animation: $name $interval steps($steps) $length;
  -moz-animation: $name $interval steps($steps) $length;
  -ms-animation: $name $interval steps($steps) $length;
  -o-animation: $name $interval steps($steps) $length;
  animation: $name $interval steps($steps) $length;
}

@mixin keyframes($name, $to, $from: 0) {
  @-webkit-keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @-moz-keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @-ms-keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @-o-keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }

  @keyframes $name {
    from {
      background-position: $from;
    }

    to {
      background-position: $to;
    }
  }
}

// media queries for screen width
@mixin responsive($width) {
  @if $width == medium-screens {
    @media only screen and (max-width: $width-md) {
      @content;
    }
  } @else if $width == tablet-screens {
    @media only screen and (max-width: $width-sm2) {
      @content;
    }
  } @else if $width == small-screens {
    @media only screen and (max-width: $width-sm) {
      @content;
    }
  }
}

// media queries for screen height
@mixin responsive_height($height) {
  @if $height == tall-screens {
    @media only screen and (max-height: $height-lg) {
      @content;
    }
  } @else if $height == medium-screens {
    @media only screen and (max-height: $height-md) {
      @content;
    }
  } @else if $height == short-screens {
    @media only screen and (max-height: $height-sm) {
      @content;
    }
  }
}

@mixin responsive_mobile_landscape() {
  @media only screen and (max-height: 320px) and (min-width: 320px) {
    @content;
  }
}

// set 2x resolution images for retina displays
// note: files should be named like image.png and image-2x.png
@mixin retinize($file, $type, $width, $height) {
  background-image: url("../img/" + $file + "." + $type);
  // is the device a high dpi screen?
  @media #{$is-hidpi} {
    & {
      background-image: url("../img/" + $file + "-2x." + $type);
      // use vendor prefixes for background size
      @include background-size($width, $height);
    }
  }
}
